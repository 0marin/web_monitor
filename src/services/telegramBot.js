const TelegramBot = require('node-telegram-bot-api');
const logger = require('../utils/logger');

let bot = null;

const setupTelegramBot = () => {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN not found in environment variables');
    }

    bot = new TelegramBot(token, { polling: true });
    setupCommandHandlers();
    logger.info('Telegram bot initialized successfully');
  } catch (error) {
    logger.error('Failed to initialize Telegram bot:', error);
    throw error;
  }
};

const setupCommandHandlers = () => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      await bot.sendMessage(chatId,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Web Monitor Bot!\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
        '/status - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
        '/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏\n' +
        '/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏\n' +
        '/check_now - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–π—á–∞—Å\n\n' +
        '–í–∞—à Chat ID: `' + chatId + '`\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('Error sending welcome message:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pause
  bot.onText(/\/pause/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      await bot.sendMessage(chatId, 
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Web Monitor Bot!\n\n' +
        '–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.\n\n' +
        '–í–∞—à Chat ID: `' + chatId + '`\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.',
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('Error sending welcome message:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pause
  bot.onText(/\/pause/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      const Monitor = require('../models/Monitor');
      const { stopMonitor } = require('./scheduler');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      const monitors = await Monitor.find({
        telegramChatId: chatId.toString(),
        isActive: true
      });

      for (const monitor of monitors) {
        stopMonitor(monitor._id.toString());
        monitor.isActive = false;
        monitor.pausedAt = new Date();
        await monitor.save();
      }

      await bot.sendMessage(chatId,
        `‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n` +
        `–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${monitors.length}\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('Error pausing monitors:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resume
  bot.onText(/\/resume/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      const Monitor = require('../models/Monitor');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
      const monitors = await Monitor.find({
        telegramChatId: chatId.toString(),
        isActive: false,
        pausedAt: { $exists: true }
      });

      for (const monitor of monitors) {
        monitor.isActive = true;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        monitor.lastCheck = monitor.pausedAt;
        monitor.pausedAt = null;
        await monitor.save();
      }

      await bot.sendMessage(chatId,
        `‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω\n` +
        `–ó–∞–ø—É—â–µ–Ω–æ –∑–∞–¥–∞—á: ${monitors.length}\n` +
        `–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('Error resuming monitors:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check_now
  bot.onText(/\/check_now/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      const Monitor = require('../models/Monitor');
      const { checkWebsite } = require('./scheduler');
      
      const monitors = await Monitor.find({
        telegramChatId: chatId.toString(),
        isActive: true
      });

      if (monitors.length === 0) {
        await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        return;
      }

      await bot.sendMessage(chatId, `üîÑ –ü—Ä–æ–≤–µ—Ä—è—é ${monitors.length} —Å–∞–π—Ç–æ–≤...`);
      
      for (const monitor of monitors) {
        try {
          await checkWebsite(monitor);
        } catch (error) {
          logger.error(`Error checking website ${monitor.url}:`, error);
        }
      }

      await bot.sendMessage(chatId, '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      logger.error('Error in manual check:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
  bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      const Monitor = require('../models/Monitor');
      const activeMonitors = await Monitor.find({
        telegramChatId: chatId.toString()
      });

      const active = activeMonitors.filter(m => m.isActive).length;
      const paused = activeMonitors.filter(m => !m.isActive).length;

      await bot.sendMessage(chatId,
        `üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n` +
        `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${active}\n` +
        `–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${paused}\n` +
        `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${activeMonitors.length}\n` +
        `Chat ID: ${chatId}`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      logger.error('Error sending status:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
    }
  });
};

const sendChangeNotification = async (chatId, monitorData, oldContent, newContent) => {
  if (!bot) {
    logger.error('Telegram bot not initialized');
    return;
  }

  try {
    const message = formatChangeNotification(monitorData, oldContent, newContent);
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      disable_web_page_preview: true
    });
    logger.info(`Change notification sent to chat ${chatId}`);
  } catch (error) {
    logger.error('Error sending change notification:', error);
    throw error;
  }
};

const formatChangeNotification = (monitorData, oldContent, newContent) => {
  const { url, name, selector } = monitorData;
  
  let message = `üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ!*\n\n`;
  message += `*–°–∞–π—Ç:* ${name}\n`;
  message += `*URL:* [–û—Ç–∫—Ä—ã—Ç—å](${url})\n`;
  
  if (monitorData.notifications.telegram.format === 'detailed') {
    message += `\n*–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n\`\`\`\n${truncateContent(oldContent)}\n\`\`\`\n`;
    message += `\n*–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n\`\`\`\n${truncateContent(newContent)}\n\`\`\``;
  } else {
    message += `\n*–°—Ç–∞—Ç—É—Å:* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å`;
  }
  
  return message;
};

const truncateContent = (content, maxLength = 500) => {
  if (!content) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  content = content.trim();
  if (content.length <= maxLength) return content;
  return content.substring(0, maxLength) + '...';
};

module.exports = {
  setupTelegramBot,
  sendChangeNotification
};